// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  CREATOR
  ADMIN
}

model User {
  id        Int         @id @unique @default(autoincrement())
  name      String
  surname   String
  username  String      @unique
  email     String      @unique
  password  String
  role      Role        @default(USER)
  post      Post[]
  banned    BannedUser?
  Request   Request[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model BannedUser {
  id        Int      @id @unique @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          Int           @id @unique @default(autoincrement())
  title       String        @unique
  description String?
  body        String
  image       String
  isPublished Boolean       @default(false)
  author      User          @relation(fields: [authorId], references: [id])
  authorId    Int
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  Int
  tags        TagsOnPosts[]
  viewsCount  Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Category {
  id    Int    @id @unique @default(autoincrement())
  title String
  post  Post[]
}

model Tag {
  id   Int           @id @unique @default(autoincrement())
  name String
  post TagsOnPosts[]
}

model TagsOnPosts {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int
  assignedAt DateTime @default(now())

  @@id([postId, tagId])
}

enum RequestTypes {
  UPDATE_TO_CREATOR
  UPDATE_TO_ADMIN
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Request {
  id        String        @id @unique @default(uuid())
  type      RequestTypes
  status    RequestStatus @default(PENDING)
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}
